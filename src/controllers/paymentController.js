export const verifyPayment = async (req, res) => {
    const { razorpay_order_id, razorpay_payment_id, razorpay_signature, applicationDetails } = req.body;
    const { service, amount, whatsappNo } = applicationDetails;
    
    const userId = req.user.uid;
    const customerName = req.user.name || req.user.email;

    // ================== DEBUGGING CODE START ==================
    console.log("--- DEBUGGING SIGNATURE ---");
    // सर्वर कौन सी Secret Key इस्तेमाल कर रहा है, यह देखने के लिए (सिर्फ़ कुछ अक्षर दिखाएं)
    const serverSecret = process.env.RAZORPAY_KEY_SECRET;
    console.log("Server Key Secret (first 5 chars):", serverSecret ? serverSecret.substring(0, 5) : "UNDEFINED!");
    
    // फ्रंटएंड से क्या डेटा आया है?
    console.log("Received Order ID:", razorpay_order_id);
    console.log("Received Payment ID:", razorpay_payment_id);
    console.log("Received Signature from Razorpay:", razorpay_signature);
    
    const bodyToHash = `${razorpay_order_id}|${razorpay_payment_id}`;
    console.log("String being hashed:", bodyToHash);
    
    const shasum = crypto.createHmac('sha256', serverSecret);
    shasum.update(bodyToHash);
    const generatedDigest = shasum.digest('hex');
    
    console.log("Signature Generated by Server:", generatedDigest);
    console.log("--- END DEBUGGING ---");
    // =================== DEBUGGING CODE END ===================

    if (generatedDigest === razorpay_signature) {
        try {
            const tokenId = await generateNextTokenId();
            const slotDetails = await findNextAvailableSlot();

            if (!slotDetails) {
                return res.status(429).json({ success: false, message: 'Payment ke dauran slot full ho gaya. Kripya baad me koshish karein.' });
            }

            const newApplication = {
                userId,
                service: service.title,
                amount: Number(amount),
                paymentId: razorpay_payment_id,
                orderId: razorpay_order_id,
                status: 'Processing',
                createdAt: new Date(),
                customerName: customerName,
                whatsappNo: whatsappNo,
                paymentGateway: 'Razorpay',
                tokenId: tokenId,
                timeSlot: slotDetails.timeSlot,
                slotAssignedAt: slotDetails.slotAssignedAt
            };
            
            await db.collection('payments').add(newApplication);
            await saveApplicationDataToSheet(newApplication);

            res.status(201).json({ 
                success: true,
                message: 'Payment safal! Aapka application submit ho gaya hai.', 
                applicationDetails: {
                    tokenId: newApplication.tokenId,
                    timeSlot: newApplication.timeSlot,
                    service: newApplication.service,
                    createdAt: newApplication.createdAt
                }
            });
        } catch (error) {
            console.error('Error saving application:', error);
            res.status(500).json({ message: 'Application save karne me asamarth.' });
        }
    } else {
        res.status(400).json({ success: false, message: 'Payment verification fail ho gayi. Invalid signature.' });
    }
};
